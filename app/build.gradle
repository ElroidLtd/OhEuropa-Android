apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.objectbox'
apply plugin: 'com.akaita.android.easylauncher'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 30

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    lintOptions {
        // check for errors in release builds, but continue the build even when errors are found:
        abortOnError false
    }

    defaultConfig {
        applicationId "com.oheuropa.android"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 12
        versionName "1.6.0"
        testInstrumentationRunner "com.oheuropa.android.framework.CustomTestRunner"
    }

    signingConfigs {
        release {
            storeFile file(AH_STORE_FILE)
            storePassword AH_STORE_PASSWORD
            keyAlias AH_KEY_ALIAS
            keyPassword AH_KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
            multiDexEnabled true
            minifyEnabled false
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    testOptions.unitTests.includeAndroidResources true

    project.ext.set("archivesBaseName", "OhEuropa")

    applicationVariants.all { variant ->
        //add version number to apk name
        variant.outputs.all {
            outputFileName = outputFileName.replace('.apk', "-${variant.versionName}.apk")
        }

        //copy mapping.txt to proguard folder (for retrospective de-obfuscation)
        if (variant.getBuildType().isMinifyEnabled() && !variant.getBuildType().isDebuggable()) {
            variant.assemble.doLast {
                println "Saving mapping.txt for ${variant.getFlavorName()} - ${variant.getBuildType().getName()}"
                def targetDir = "${rootDir}/app/proguard/"
                def formattedDate = new Date().format('yyyy.MM.dd')
                println "Copying ${variant.mappingFile} to ${targetDir} with date ${formattedDate}"
                if (variant.mappingFile != null) {
                    getProject().copy {
                        from variant.mappingFile
                        into "${targetDir}"
                        rename { String fileName ->
                            fileName.replace('.txt', "-${defaultConfig.versionCode}-${formattedDate}.txt")
                        }
                    }
                }
            }
        }
    }
}

kapt {
    generateStubs = true
    arguments {
        arg("objectbox.debug", true)
    }
}

project.ext {
    daggerVersion = "2.29.1"
    butterKnifeVersion = "8.8.1"
    rxKotlinVersion = "2.4.0"
    rxAndroidVersion = "2.1.1"
    //rxRelayVersion = "2.1.1"
    retrofitVersion = "2.9.0"
    espressoVersion = "3.0.1"
    supportTestVersion = "1.0.1"
    kotshiVersion = "2.3.0"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // UI libs /////////////////////////////////////////////////////////////////////////////////////
    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    // Back-end libs ///////////////////////////////////////////////////////////////////////////////
    implementation 'com.daasuu:EasingInterpolator:1.3.0' //for audio fade interpolators
    implementation "com.google.android.gms:play-services-maps:17.0.0"
    implementation "com.google.android.gms:play-services-location:17.1.0"
    implementation 'com.evernote:android-job:1.4.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    //retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"

    //object box
    kapt "io.objectbox:objectbox-processor:$objectboxVersion"
    implementation "io.objectbox:objectbox-android:$objectboxVersion"
    implementation "io.objectbox:objectbox-kotlin:$objectboxVersion"
    implementation "io.objectbox:objectbox-rxjava:$objectboxVersion"

    //firebase
    implementation platform('com.google.firebase:firebase-bom:26.0.0')
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics-ktx'

    //Standard libs ////////////////////////////////////////////////////////////////////////////////

    // Android support libs
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'com.google.android.material:material:1.2.1'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation 'androidx.core:core-ktx:1.3.2'

    // Dagger core
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"

    // Dagger Android
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"

    //moshi-kotlin/kotshi
    implementation "se.ansman.kotshi:api:$kotshiVersion"
    kapt "se.ansman.kotshi:compiler:$kotshiVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"

    // ReactiveX
    implementation "io.reactivex.rxjava2:rxkotlin:$rxKotlinVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    implementation "com.halfhp.rxtracer:rxtracer:0.1.4"

    // Timber
    implementation 'com.github.ajalt:timberkt:1.5.1'

    debugImplementation "androidx.multidex:multidex:2.0.1"

    // Testing libs ////////////////////////////////////////////////////////////////////////////////
    testImplementation "junit:junit:4.13.1"
    testImplementation "org.robolectric:robolectric:4.4"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testImplementation 'io.mockk:mockk:1.10.2'
    androidTestImplementation 'io.mockk:mockk-android:1.10.2'

    androidTestImplementation "androidx.test:runner:1.3.0"
    androidTestImplementation "androidx.test:rules:1.3.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.3.0"
    androidTestImplementation "androidx.test.espresso:espresso-intents:3.3.0"
    androidTestImplementation "androidx.annotation:annotation:1.1.0"
}
